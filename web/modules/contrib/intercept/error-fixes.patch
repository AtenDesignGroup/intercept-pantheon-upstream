diff --git a/composer.json b/composer.json
index a704501..1fd2058 100644
--- a/composer.json
+++ b/composer.json
@@ -19,7 +19,6 @@
     }
   },
   "require": {
-    "cweagans/composer-patches": "^1.0",
     "drupal/addtocalendar": "^3.1",
     "drupal/address": "^1.3",
     "drupal/better_exposed_filters": "^3.0@alpha",
@@ -45,15 +44,5 @@
     "drupal/simple_oauth": "^3.5",
     "drupal/tally": "1.x-dev",
     "drupal/votingapi": "^3.0@beta"
-  },
-  "extra": {
-    "patches": {
-      "drupal/addtocalendar": {
-        "Fix configuration": "https://www.drupal.org/files/issues/2019-11-06/addtocalendar-config.patch"
-      },
-      "drupal/office_hours": {
-        "Missing Group Annotation for Kernel Test": "https://www.drupal.org/files/issues/2019-06-27/group-annotation-in-test-class-3064545-1.patch"
-      }
-    }
   }
 }
diff --git a/intercept.info.yml b/intercept.info.yml
index 31da374..95d5c13 100644
--- a/intercept.info.yml
+++ b/intercept.info.yml
@@ -2,4 +2,5 @@ name: Intercept
 description: 'Provides core components required by other features.'
 type: module
 core: 8.x
+core_version_requirement: ^8.7
 package: 'Intercept'
diff --git a/modules/intercept_core/intercept_core.module b/modules/intercept_core/intercept_core.module
index c12224d..907b425 100644
--- a/modules/intercept_core/intercept_core.module
+++ b/modules/intercept_core/intercept_core.module
@@ -117,7 +117,7 @@ function intercept_core_preprocess_input__date(&$variables) {
  *   The form state of the parent form.
  */
 function intercept_core_inline_entity_form_entity_form_alter(array &$entity_form, FormStateInterface &$form_state) {
-  if ($entity_form['#form_id'] == 'user_customer_form' && $entity_form['#entity_type'] == 'profile') {
+  if (array_key_exists('#form_id', $entity_form) && $entity_form['#form_id'] == 'user_customer_form' && $entity_form['#entity_type'] == 'profile') {
     $form_state->getFormObject()->alterProfileForm($entity_form, $form_state);
   }
   if ($entity_form['#entity_type'] == 'media') {
diff --git a/modules/intercept_core/src/Controller/UserAccount.php b/modules/intercept_core/src/Controller/UserAccount.php
index 6ece810..7f2420f 100644
--- a/modules/intercept_core/src/Controller/UserAccount.php
+++ b/modules/intercept_core/src/Controller/UserAccount.php
@@ -27,9 +27,11 @@ class UserAccount extends ControllerBase {
     $config_factory = \Drupal::service('config.factory');
     $settings = $config_factory->get('intercept_ils.settings');
     $intercept_ils_plugin = $settings->get('intercept_ils_plugin', '');
-    $ils_manager = \Drupal::service('plugin.manager.intercept_ils');
-    $ils_plugin = $ils_manager->createInstance($intercept_ils_plugin);
-    $this->client = $ils_plugin->getClient();
+    if ($intercept_ils_plugin) {
+      $ils_manager = \Drupal::service('plugin.manager.intercept_ils');
+      $ils_plugin = $ils_manager->createInstance($intercept_ils_plugin);
+      $this->client = $ils_plugin->getClient();
+    }
   }
 
   /**
diff --git a/modules/intercept_equipment/src/Form/EquipmentReservationRevisionRevertForm.php b/modules/intercept_equipment/src/Form/EquipmentReservationRevisionRevertForm.php
index 27326d2..f52418c 100644
--- a/modules/intercept_equipment/src/Form/EquipmentReservationRevisionRevertForm.php
+++ b/modules/intercept_equipment/src/Form/EquipmentReservationRevisionRevertForm.php
@@ -6,6 +6,7 @@ use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Url;
 use Drupal\intercept_equipment\Entity\EquipmentReservationInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
@@ -16,7 +17,6 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
  */
 class EquipmentReservationRevisionRevertForm extends ConfirmFormBase {
 
-
   /**
    * The Equipment reservation revision.
    *
@@ -29,7 +29,7 @@ class EquipmentReservationRevisionRevertForm extends ConfirmFormBase {
    *
    * @var \Drupal\Core\Entity\EntityStorageInterface
    */
-  protected $EquipmentReservationStorage;
+  protected $equipmentReservationStorage;
 
   /**
    * The date formatter service.
@@ -47,7 +47,7 @@ class EquipmentReservationRevisionRevertForm extends ConfirmFormBase {
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
-    $this->EquipmentReservationStorage = $entity_storage;
+    $this->equipmentReservationStorage = $entity_storage;
     $this->dateFormatter = $date_formatter;
   }
 
@@ -82,6 +82,13 @@ class EquipmentReservationRevisionRevertForm extends ConfirmFormBase {
     return $this->t('Revert');
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function getCancelUrl() {
+    return new Url('entity.equipment_reservation.version_history', ['equipment_reservation' => $this->revision->id()]);
+  }
+
   /**
    * {@inheritdoc}
    */
@@ -93,7 +100,7 @@ class EquipmentReservationRevisionRevertForm extends ConfirmFormBase {
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state, $equipment_reservation_revision = NULL) {
-    $this->revision = $this->EquipmentReservationStorage->loadRevision($equipment_reservation_revision);
+    $this->revision = $this->equipmentReservationStorage->loadRevision($equipment_reservation_revision);
     $form = parent::buildForm($form, $form_state);
 
     return $form;
@@ -112,7 +119,7 @@ class EquipmentReservationRevisionRevertForm extends ConfirmFormBase {
     $this->revision->save();
 
     $this->logger('content')->notice('Equipment reservation: reverted %title revision %revision.', ['%title' => $this->revision->label(), '%revision' => $this->revision->getRevisionId()]);
-    drupal_set_message($this->t('Equipment reservation %title has been reverted to the revision from %revision-date.', ['%title' => $this->revision->label(), '%revision-date' => $this->dateFormatter->format($original_revision_timestamp)]));
+    $this->messenger()->addMessage($this->t('Equipment reservation %title has been reverted to the revision from %revision-date.', ['%title' => $this->revision->label(), '%revision-date' => $this->dateFormatter->format($original_revision_timestamp)]));
     $form_state->setRedirect(
       'entity.equipment_reservation.version_history',
       ['equipment_reservation' => $this->revision->id()]
diff --git a/modules/intercept_equipment/src/Form/EquipmentReservationUpdateStatusForm.php b/modules/intercept_equipment/src/Form/EquipmentReservationUpdateStatusForm.php
index 09db406..32d62bf 100644
--- a/modules/intercept_equipment/src/Form/EquipmentReservationUpdateStatusForm.php
+++ b/modules/intercept_equipment/src/Form/EquipmentReservationUpdateStatusForm.php
@@ -4,6 +4,7 @@ namespace Drupal\intercept_equipment\Form;
 
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Url;
 
 /**
  * Class UpdateStatusForm.
@@ -26,6 +27,15 @@ class EquipmentReservationUpdateStatusForm extends ContentEntityConfirmFormBase
     ]);
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function getCancelUrl() {
+    return Url::fromRoute("entity.equipment_reservation.canonical", [
+      'equipment_reservation' => $this->entity->id(),
+    ]);
+  }
+
   /**
    * {@inheritdoc}
    */
@@ -49,7 +59,7 @@ class EquipmentReservationUpdateStatusForm extends ContentEntityConfirmFormBase
     parent::submitForm($form, $form_state);
     $this->entity->field_status->setValue([$this->getStatus()->value]);
     $this->entity->save();
-    drupal_set_message($this->t('The reservation has been @action', ['@action' => $this->getStatus()->status]), 'status');
+    $this->messenger()->addMessage($this->t('The reservation has been @action', ['@action' => $this->getStatus()->status]), 'status');
     $form_state->setRedirect('entity.equipment_reservation.canonical', [
       'equipment_reservation' => $this->entity->id(),
     ]);
diff --git a/modules/intercept_event/src/DateRecurRRule.php b/modules/intercept_event/src/DateRecurRRule.php
deleted file mode 100644
index f7aca2c..0000000
--- a/modules/intercept_event/src/DateRecurRRule.php
+++ /dev/null
@@ -1,110 +0,0 @@
-<?php
-
-namespace Drupal\intercept_event;
-
-use Drupal\date_recur\DateRecurDefaultRRule;
-use Drupal\date_recur\DateRecurDefaultRSet;
-use Drupal\date_recur\DateRecurRRule as DateRecurRRuleContrib;
-use RRule\RfcParser;
-
-/**
- * Extends date_recur calculations.
- */
-class DateRecurRRule extends DateRecurRRuleContrib {
-
-  /**
-   * {@inheritdoc}
-   */
-  public function __construct($rrule, $startDate, $startDateEnd = NULL, $timezone = NULL) {
-    $this->originalRuleString = $rrule;
-    $this->startDate = $startDate;
-    $this->recurTime = $this->startDate->format('H:i');
-    if (empty($startDateEnd)) {
-      $startDateEnd = clone $startDate;
-    }
-    $this->startDateEnd = $startDateEnd;
-    $this->recurDiff = $this->startDate->diff($startDateEnd);
-
-    $this::parseRrule($rrule, $startDate);
-    // TODO: Make this optional in the field configuration.
-    if (!empty($this->parts['UNTIL'])) {
-      $this->parts['UNTIL']->add(new \DateInterval('P1D'));
-    }
-
-    $this->rrule = new DateRecurDefaultRSet();
-    $this->rrule->addRRule(new DateRecurDefaultRRule($this->parts));
-    if (!empty($this->setParts)) {
-      foreach ($this->setParts as $type => $type_parts) {
-        foreach ($type_parts as $part) {
-          list(, $part) = explode(':', $part);
-          switch ($type) {
-            case 'RDATE':
-              $this->rrule->addDate($part);
-              break;
-
-            case 'EXDATE':
-              $this->rrule->addExDate($part);
-              break;
-
-            case 'EXRULE':
-              $this->rrule->addExRule($part);
-          }
-        }
-      }
-    }
-
-    if ($timezone) {
-      $this->timezone = $timezone;
-      $start = clone $this->startDate;
-      $start->setTimezone(new \DateTimeZone($this->timezone));
-      $this->timezoneOffset = $start->getOffset();
-      $this->rrule->setTimezoneOffset($this->timezoneOffset);
-    }
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function parseRrule($rrule, $startDate, $check_only = FALSE) {
-    // Correct formatting.
-    if (strpos($rrule, "\n") === FALSE && strpos($rrule, 'RRULE:') !== 0) {
-      $rrule = "RRULE:$rrule";
-    }
-
-    $dtstart = '';
-
-    // Check for unsupported parts.
-    $set_keys = ['RDATE', 'EXRULE', 'EXDATE'];
-    $rules = $set_parts = [];
-    foreach (explode("\n", $rrule) as $part) {
-      $els = explode(':', $part);
-      if (in_array($els[0], $set_keys)) {
-        $set_parts[$els[0]][] = $part;
-      }
-      elseif ($els[0] == 'RRULE') {
-        $rules[] = $part;
-      }
-      elseif ($els[0] == 'DTSTART') {
-        $dtstart = $part;
-      }
-      else {
-        throw new \InvalidArgumentException("Unsupported line: " . $part);
-      }
-    }
-
-    if (!count($rules)) {
-      throw new \InvalidArgumentException("Missing RRULE line: " . $rrule);
-    }
-    if (count($rules) > 1) {
-      throw new \InvalidArgumentException("More than one RRULE line is not supported.");
-    }
-    $rrule = $dtstart . "\n" . $rules[0];
-
-    if (empty($parts['WKST'])) {
-      $parts['WKST'] = 'MO';
-    }
-    $this->parts = RfcParser::parseRRule($rrule, $startDate);
-    $this->setParts = $set_parts;
-  }
-
-}
diff --git a/modules/intercept_event/src/Form/EventAttendanceEventsForm.php b/modules/intercept_event/src/Form/EventAttendanceEventsForm.php
index 41a475a..2f084c2 100644
--- a/modules/intercept_event/src/Form/EventAttendanceEventsForm.php
+++ b/modules/intercept_event/src/Form/EventAttendanceEventsForm.php
@@ -7,7 +7,7 @@ use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Form\FormStateInterface;
-use Drupal\date_recur\DateRecurRRule;
+use Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem;
 use Drupal\intercept_core\DateRangeFormatterTrait;
 use Drupal\intercept_core\Utility\Dates;
 use Drupal\intercept_event\RecurringEventManager;
@@ -135,8 +135,8 @@ class EventAttendanceEventsForm extends ContentEntityForm {
       }
       return [
         [
-          'value' => DateRecurRRule::massageDateValueForStorage($item->start_date, $storage_format),
-          'end_value' => DateRecurRRule::massageDateValueForStorage($item->end_date, $storage_format),
+          'value' => $this->compensate($item->start_date)->format($storage_format),
+          'end_value' => $this->compensate($item->end_date)->format($storage_format),
         ],
       ];
     }
@@ -203,7 +203,7 @@ class EventAttendanceEventsForm extends ContentEntityForm {
       $node->save();
       $count++;
     }
-    drupal_set_message($this->t('@count events updated.', ['@count' => $count]));
+    $this->messenger()->addMessage($this->t('@count events updated.', ['@count' => $count]));
   }
 
   /**
@@ -230,7 +230,7 @@ class EventAttendanceEventsForm extends ContentEntityForm {
       $event->set('event_recurrence', $this->eventRecurrence->id());
       $event->save();
     }
-    drupal_set_message($this->t('@count events created.', ['@count' => count($dates)]));
+    $this->messenger()->addMessage($this->t('@count events created.', ['@count' => count($dates)]));
   }
 
   /**
diff --git a/modules/intercept_location/src/LocationListBuilder.php b/modules/intercept_location/src/LocationListBuilder.php
index 9bd4b88..2413b66 100644
--- a/modules/intercept_location/src/LocationListBuilder.php
+++ b/modules/intercept_location/src/LocationListBuilder.php
@@ -16,7 +16,7 @@ class LocationListBuilder extends NodeListBuilder {
    */
   public function buildRow(EntityInterface $entity) {
     $row = parent::buildRow($entity);
-    $row['type'] = $entity->field_polaris_id->getString();
+    $row['type'] = $entity->field_polaris_id ? $entity->field_polaris_id->getString() : '';
     return $row;
   }
 
diff --git a/modules/intercept_room_reservation/src/Form/RoomReservationAgreementForm.php b/modules/intercept_room_reservation/src/Form/RoomReservationAgreementForm.php
index 7e29f5f..8e6b6a8 100644
--- a/modules/intercept_room_reservation/src/Form/RoomReservationAgreementForm.php
+++ b/modules/intercept_room_reservation/src/Form/RoomReservationAgreementForm.php
@@ -49,21 +49,15 @@ class RoomReservationAgreementForm extends FormBase {
     $form['agree'] = [
       '#type' => 'submit',
       '#value' => $this->t('Agree'),
-      '#submit' => ['::agree'],
     ];
 
     return $form;
   }
 
   /**
-   * Sets the room reservation agreement.
-   *
-   * @param array $form
-   *   An associative array containing the structure of the form.
-   * @param Drupal\Core\Form\FormStateInterface $form_state
-   *   The current state of the form.
+   * {@inheritdoc}
    */
-  public function agree(array &$form, FormStateInterface $form_state) {
+  public function submitForm(array &$form, FormStateInterface $form_state) {
     $temp_store = $this->tempStoreFactory->get('reservation_agreement');
     $temp_store->set('room', 1);
   }
