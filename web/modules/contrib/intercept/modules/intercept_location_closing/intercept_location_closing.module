<?php

/**
 * @file
 * Contains intercept_location_closing.module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;

/**
 * Implements hook_help().
 */
function intercept_location_closing_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the intercept_location_closing module.
    case 'help.page.intercept_location_closing':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Allows locations to be marked as closed') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_operation().
 */
function intercept_location_closing_entity_operation(\Drupal\Core\Entity\EntityInterface $entity) {
  $operations = [];
  if ($entity->getEntityTypeId() == 'intercept_location_closing') {
    $operations['event_conflicts'] = [
      'title' => t('Event Conflicts'),
      'url' => $entity->toUrl('event-conflicts'),
      'weight' => 50,
    ];
  }

  return $operations;
}

/**
 * Implements hook_entity_extra_field_info().
 */
function intercept_location_closing_entity_extra_field_info() {
  $extra = [];

  // Add a view of events that occur during this closing period.
  $extra['intercept_location_closing']['intercept_location_closing']['display']['event_conflicts'] = [
    'label' => new TranslatableMarkup('Event Conflicts'),
    'description' => new TranslatableMarkup('A view of events that occur during this closing period.'),
    'weight' => 0,
    'visible' => FALSE,
  ];

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function intercept_location_closing_intercept_location_closing_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('event_conflicts')) {
    $event_ids = \Drupal::service('intercept_location_closing.query')->eventsConflictingWithClosing($entity);

    $view_name = 'intercept_event_location_closing_conflicts';
    $view = \Drupal\views\Views::getView($view_name);
    $view->setDisplay('conflicts');

    $view->setArguments([implode('+', $event_ids)]);
    $view->execute();
    // Render the view.
    $build['event_conflicts'] = $view->preview();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function intercept_location_closing_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $entity = $form_state->getFormObject()->getEntity();
  $bundle = $entity->bundle();

  if ($bundle == 'event') {
    \Drupal::service('intercept_location_closing.query')->eventClosingConflictPrompt($entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function intercept_location_closing_node_insert(EntityInterface $entity) {
  if ($entity->bundle() == 'event') {
    \Drupal::service('intercept_location_closing.query')->eventClosingConflictPrompt($entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function intercept_location_closing_node_update(EntityInterface $entity) {
  if ($entity->bundle() == 'event') {
    \Drupal::service('intercept_location_closing.query')->eventClosingConflictPrompt($entity);
  }
}

/**
 * Implements hook_preprocess_HOOK() for intercept_event_list.
 */
function intercept_location_closing_preprocess_intercept_event_list(&$variables) {
  $results = [];
  $first_day = new \DateTime('first day of january this year');
  $closing_query = \Drupal::service('entity_type.manager')
    ->getStorage('intercept_location_closing')
    ->getQuery()
    ->accessCheck(TRUE);
  $closings = $closing_query
    ->condition('status', 1)
    ->condition('date.value', $first_day->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT), '>=')
    ->execute();
  if (!empty($closings)) {
    $results = array_map(function ($closing_id) {
      /** @var \Drupal\intercept_location_closing\Entity\InterceptLocationClosingInterface $closing */
      $closing = \Drupal::service('entity_type.manager')
        ->getStorage('intercept_location_closing')
        ->load($closing_id);
      return [
        'id' => $closing->id(),
        'message' => $closing->getMessage(),
        'start' => $closing->getStartTime(),
        'end' => $closing->getEndTime(),
        'locations' => array_map(function ($location) {
          return $location->uuid();
        }, $closing->getLocations()),
      ];
    }, $closings);
  }
  $variables['#attached']['drupalSettings']['intercept']['location_closings'] = $results;
}

/**
 * Given a location and start and end dates, find a matching location closing.
 */
function intercept_location_closing_get_closing($location, $start, $end) {
  $closing_query = \Drupal::service('entity_type.manager')
    ->getStorage('intercept_location_closing')
    ->getQuery()
    ->accessCheck(TRUE);
  $date_group = $closing_query
    ->andConditionGroup()
    ->condition('date.value', $end, '<=')
    ->condition('date.end_value', $start, '>');
  $closings = $closing_query
    ->condition('location', $location->id())
    ->condition('status', 1)
    ->condition($date_group)
    ->execute();

  return $closings;
}

/**
 * Implements hook_intercept_room_reservation_dates_alter().
 */
function intercept_location_closing_intercept_room_reservation_dates_alter(&$dates, $params, $node) {
  if ($location = $node->field_location->entity) {
    if ($closings = \Drupal::service('intercept_location_closing.query')->locationClosings($location, $params['start'], $params['end'])) {
      foreach ($closings as $closing_id) {
        $closing = \Drupal::service('entity_type.manager')->getStorage('intercept_location_closing')->load($closing_id);
        $dates[$closing->uuid()] = [
          'start' => $closing->getStartTime(),
          'end' => $closing->getEndTime(),
          'message' => $closing->getMessage(),
        ];
      }
    }
  }
}
