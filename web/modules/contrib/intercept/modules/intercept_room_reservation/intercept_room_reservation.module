<?php

/**
 * @file
 * Contains intercept_room_reservation.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\TypedData\DataDefinition;
use Drupal\Core\Url;
use Drupal\intercept_room_reservation\Entity\RoomReservationInterface;
use Drupal\node\NodeInterface;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;

/**
 * Implements hook_help().
 */
function intercept_room_reservation_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the intercept_room_reservation module.
    case 'help.page.intercept_room_reservation':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Room reservation functionality for the Intercept library') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_jsonapi_ENTITY_TYPE_filter_access().
 */
function intercept_room_reservation_jsonapi_room_reservation_filter_access(\Drupal\Core\Entity\EntityTypeInterface $entity_type, \Drupal\Core\Session\AccountInterface $account) {
  return ([
    // @todo CRL-163: The 'view referenced user room_reservation' permission does not yet exist.
    // Once it has been implemented, the AMONG_ALL should be commented out and AMONG_OWN deleted.
    // JSONAPI_FILTER_AMONG_ALL => AccessResult::allowedIfHasPermissions($account, ['view room_reservation', 'view referenced user room_reservation'], 'OR'),
    JSONAPI_FILTER_AMONG_ALL => AccessResult::allowedIfHasPermissions($account, ['view room_reservation'], 'OR'),
    JSONAPI_FILTER_AMONG_OWN => AccessResult::allowedIfHasPermission($account, 'view own room_reservation'),
  ]);
}

/**
 * Implements hook_preprocess_page().
 */
function intercept_room_reservation_preprocess_page(array &$variables) {
  // Add customer room reservation limit
  $limit = \Drupal::config('intercept_room_reservation.settings')->get('reservation_limit', 0);
  $variables['#attached']['drupalSettings']['intercept']['room_reservations']['customer_limit'] = $limit;

  // Add customer room reservation limit
  $advanced_limit = \Drupal::config('intercept_room_reservation.settings')->get('advanced_reservation_limit', 0);
  $variables['#attached']['drupalSettings']['intercept']['room_reservations']['customer_advanced_limit'] = $advanced_limit;
  if (isset($advanced_limit) && $advanced_limit !== '0') {
    $variables['#attached']['drupalSettings']['intercept']['room_reservations']['customer_advanced_text'] = t(
      'Reservations may be made up to @limit days in advance', ['@limit' => $advanced_limit]);
  }

  // Add publicize field
  $reservation_fields = Drupal::service('entity_field.manager')->getFieldDefinitions('room_reservation', 'room_reservation');
  if (array_key_exists('field_publicize', $reservation_fields)) {
    $publicize_settings = $reservation_fields['field_publicize']->getSettings();
    $variables['#attached']['drupalSettings']['intercept']['room_reservations']['field_publicize']['description'] = $publicize_settings['on_label'];
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function intercept_room_reservation_room_reservation_presave(RoomReservationInterface $entity) {
  if ($entity->statusHasChanged()) {
    \Drupal::service('intercept_core.reservation.manager')->notifyStatusChange($entity, $entity->getOriginalStatus(), $entity->getNewStatus());
  }
  if ($entity->isNew()) {
    // If they've signed the agreement, remove it from their session.
    if (\Drupal::service('current_user')->isAnonymous()) {
      return;
    }
    $temp_store = \Drupal::service('user.private_tempstore')->get('reservation_agreement');
    if ($temp_store->get('room')) {
      $temp_store->delete('room');
      if ($entity->hasField('field_agreement')) {
        $entity->field_agreement->setValue(1);
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function intercept_room_reservation_node_delete(NodeInterface $node) {
  if (!$node->bundle() == 'event') {
    return;
  }
  if (!\Drupal::hasService('intercept_core.reservation.manager')) {
    return;
  }
  if ($reservation = \Drupal::service('intercept_core.reservation.manager')->getEventReservation($node)) {
    $reservation->delete();
  }
}

/**
 * Implements hook_entity_operation().
 */
function intercept_room_reservation_entity_operation(EntityInterface $entity) {
  // TODO: Move this to the reservation manager.
  if ($entity->getEntityTypeId() == 'room_reservation') {
    $operation = function ($op) use ($entity) {
      return [
        'title' => t(ucwords($op)),
        'url' => Url::fromRoute("entity.room_reservation.{$op}_form", [
          'room_reservation' => $entity->id(),
          'destination' => Url::fromRoute('<current>')->toString(),
        ]),
      ];
    };

    $operation_types = ['cancel', 'approve', 'deny'];

    $operations = [];

    foreach ($operation_types as $type) {
      if (!$entity->access($type)) {
        continue;
      }
      $operations[$type] = $operation($type);
    }

    return $operations;
  }
  return [];
}

/**
 * Implements hook_theme().
 */
function intercept_room_reservation_theme() {
  return [
    'room_reservation' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_mail().
 */
function intercept_room_reservation_mail($key, &$message, $params) {
  if (!empty($params['reservation_manager'])) {
    /* @var \Drupal\intercept_core\ReservationManager $reservation_manager */
    $reservation_manager = $params['reservation_manager'];
    $params['reservation_manager']->buildEmail($key, $message, $params);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function intercept_room_reservation_form_node_form_alter(&$form, $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  if ($node->bundle() == 'event') {
    \Drupal::service('intercept_core.reservation.manager')->nodeFormAlter($form, $form_state);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function intercept_room_reservation_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $view = $form_state->get('view');
  if ($view->id() == 'intercept_room_reservations' && $view->current_display == 'embed') {

    // Change the locations field to be a dropdown.
    $storage = Drupal::getContainer()->get('entity_type.manager')->getStorage('node');
    $nids = $storage->getQuery();

    // Gather published location nodes and sort by title.
    $nids = $nids->condition('type', 'location')
      ->condition('status', 1)
      ->sort('title')
      ->execute();

    // If there are no nodes, move on
    if (!$nids) {
      return FALSE;
    }

    // Start building out the options for our select list.
    $options = [];
    $nodes = $storage->loadMultiple($nids);

    // Push titles into select list
    foreach ($nodes as $node) {
      $title = $node->getTitle();
      $options[$title] = $title;
    }

    // Start building out our new form element.
    $location_field = 'title';
    $form[$location_field]['#type'] = 'select';
    $form[$location_field]['#multiple'] = FALSE;

    // Specify the empty option for our select list.
    $form[$location_field]['#empty_option'] = t('Any');

    // Add the $options from above to our select list.
    $form[$location_field]['#options'] = $options;
    unset($form[$location_field]['#size']);

    // Remove autocomplete from the reservation form's date fields.
    $form['date']['min']['#attributes']['autocomplete'] = 'off';
    $form['date']['max']['#attributes']['autocomplete'] = 'off';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function intercept_room_reservation_form_room_reservation_update_status_form_alter(&$form, $form_state, $form_id) {
  $arguments = $form['#title']->getArguments();
  $operation = $arguments['@action'];
  if ($operation == 'cancel') {
    // Rewrite the confirmation message to match the customer confirmation.
    $form['description'] = [
      '#markup' => '<p>' . t('Are you sure you want to cancel this reservation?') . '</p>',
    ];
    // Add margin to the right of the first action button.
    $form['actions']['cancel']['#prefix'] = '<div class="actions">';
    $form['actions']['submit']['#suffix'] = '</div>';
    $form['actions']['cancel']['#attached'] = [
      'library' => ['intercept_room_reservation/roomReservationActionButton'],
    ];
    // Change the titles and position of the buttons.
    $form['actions']['cancel']['#title'] = 'No';
    $form['actions']['cancel']['#weight'] = 4;
    $form['actions']['submit']['#value'] = 'Yes';
    $form['actions']['submit']['#weight'] = 5;
  }
}

/**
 * Prepares variables for Room reservation templates.
 *
 * Default template: room_reservation.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the user information and any
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_room_reservation(array &$variables) {
  // Fetch RoomReservation Entity Object.
  $room_reservation = $variables['room_reservation'] = $variables['elements']['#room_reservation'];
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  $variables['label'] = $room_reservation->label();
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function intercept_room_reservation_theme_suggestions_room_reservation(array $variables) {
  $suggestions = [];
  $room_reservation = $variables['elements']['#room_reservation'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'room_reservation__' . $sanitized_view_mode;
  $suggestions[] = 'room_reservation__' . $room_reservation->bundle();
  $suggestions[] = 'room_reservation__' . $room_reservation->bundle() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_entity_extra_field_info().
 */
function intercept_room_reservation_entity_extra_field_info() {
  $extra = [];

  $extra['node']['event']['form']['reservation'] = [
    'label' => t('Reservations'),
    'description' => t('Manage reservations for this event.'),
    'visible' => FALSE,
  ];

  $extra['room_reservation']['room_reservation']['display']['location_full'] = [
    'label' => t('Full location'),
    'description' => t('Location title and room name'),
    'weight' => 10,
    'visible' => FALSE,
  ];

  $extra['room_reservation']['room_reservation']['display']['attendees_full'] = [
    'label' => t('Attendee count'),
    'description' => t('Atendee count and label'),
    'weight' => 15,
    'visible' => FALSE,
  ];

  $extra['room_reservation']['room_reservation']['display']['action_button'] = [
    'label' => t('Action button'),
    'description' => t('Cancel deny and approve buttons.'),
    'weight' => 15,
    'visible' => FALSE,
  ];
  return $extra;
}

/**
 * Implements hook_entity_bundle_field_info().
 */
function intercept_room_reservation_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
  $fields = [];
  if ($entity_type->id() == 'node' && $bundle == 'room') {
    // @TODO: Make this configurable by privileged user accounts.
    $fields['room_thumbnail'] = BaseFieldDefinition::create('intercept_computed')
      ->setLabel(new TranslatableMarkup('Image Thumbnail'))
      ->setComputed(TRUE)
      ->setSetting('properties', [
        'thumbnail' => DataDefinition::create('string')->setLabel(t('Image Thumbnail')),
      ])
      ->setClass(\Drupal\intercept_core\EntityImageThumbnailUriField::class);
  }
  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function intercept_room_reservation_room_reservation_view(array &$build, RoomReservationInterface $room_reservation, EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('location_full')) {
    $build['location_full'] = [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#attributes' => ['class' => 'field-location-full'],
      '#value' => $room_reservation->location(),
    ];
  }

  if ($display->getComponent('attendees_full')) {
    $count = $room_reservation->field_attendee_count->getString();
    $build['attendees_full'] = [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#attributes' => ['class' => 'field-attendees-full'],
      '#value' => !empty($count) ? t('@count Attendees', [
        '@count' => $count,
      ]) : '',
    ];
  }

  if ($display->getComponent('action_button')) {
    $build['action_button'] = [
      '#markup' => '<div class="js--room-reservation-action" data-reservation-uuid="' . $room_reservation->uuid() . '" data-status="' . $room_reservation->field_status->value . '" >' . $room_reservation->field_status->value . '</div>',
      '#attached' => [
        'library' => ['intercept_room_reservation/roomReservationActionButton'],
      ],
    ];
  }
}

/**
 * Implements hook_views_query_alter().
 */
function intercept_room_reservation_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'intercept_room_reservations' && $view->current_display == 'embed') {
    foreach ($query->where as &$condition_group) {
      // For each condition in condition group.
      foreach ($condition_group['conditions'] as &$condition) {
        if (isset($condition['field']) && strstr($condition['field'], 'field_dates_value')) {
          $multi_date_reservation_or = $condition['field'];
          // Run the query from the beginning of the start date until the end of the end date.
          $condition['field'] = preg_replace("/(?<=BETWEEN DATE_FORMAT\(\('\d{4}-\d{2}-\d{2}T)\d{2}:\d{2}:\d{2}' \+ INTERVAL [-+]?\d* SECOND\)/", "00:00:00')", $condition['field']);
          $condition['field'] = preg_replace("/(?<=AND DATE_FORMAT\(\('\d{4}-\d{2}-\d{2}T)\d{2}:\d{2}:\d{2}' \+ INTERVAL [-+]?\d* SECOND\)/", "23:59:59')", $condition['field']);

          // Also we need to account for the user asking for a time period in the middle of a multi-day reservation.
          preg_match("/BETWEEN DATE_FORMAT\(\('(\d{4}-\d{2}-\d{2})T\d{2}:\d{2}:\d{2}' \+ (INTERVAL [-+]?\d* SECOND)\).*AND DATE_FORMAT\(\('(\d{4}-\d{2}-\d{2})/", $multi_date_reservation_or, $matches);
          // Need 3 captures from the original value of the condition.
          // 1) Start date, 2) Interval and 3) end date
          // Need # seconds exactly.
          preg_match("/INTERVAL ([-+]?\d*) SECOND/", $matches[2], $matches_seconds);
          if ($matches_seconds) {
            if ($matches_seconds[1] < 0) { // The number is negative.
              $start_date = date('Y-m-d\TH:i:s', strtotime($matches[1] . 'T00:00:00') + abs($matches_seconds[1]));
              $end_date = date('Y-m-d\TH:i:s', strtotime($matches[3] . 'T00:00:00') + abs($matches_seconds[1]));
            }
            else { // The number is positive.
              $start_date = date('Y-m-d\TH:i:s', strtotime($matches[1] . 'T00:00:00') - abs($matches_seconds[1]));
              $end_date = date('Y-m-d\TH:i:s', strtotime($matches[3] . 'T00:00:00') - abs($matches_seconds[1]));
            }
            $multi_date_reservation_or = "DATE_FORMAT((room_reservation__field_dates.field_dates_value), '%Y-%m-%d\T%H:%i:%s') <= DATE_FORMAT(('" . $start_date . "'), '%Y-%m-%d\T%H:%i:%s') AND DATE_FORMAT((room_reservation__field_dates.field_dates_end_value), '%Y-%m-%d\T%H:%i:%s') >= DATE_FORMAT(('" . $end_date . "'), '%Y-%m-%d\T%H:%i:%s')";
            $condition['field'] = '(' . $condition['field'] . ') OR (' . $multi_date_reservation_or . ')';
          }
        }
      }
    }
  }
}
