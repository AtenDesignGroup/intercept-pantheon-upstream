var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import forEach from 'lodash/forEach';
import { EntityModel } from './EntityModel';

/**
 * An EntityModel is meant to manage the back and forth transformation between
 *  JSON_API structured resources and locally stored entity objects.
 *  EntityModel instances are created on a per resource type basis.
 *
 * @type {EntityModel}
 */
export var ImageModel = function (_EntityModel) {
  _inherits(ImageModel, _EntityModel);

  function ImageModel() {
    _classCallCheck(this, ImageModel);

    return _possibleConstructorReturn(this, (ImageModel.__proto__ || Object.getPrototypeOf(ImageModel)).apply(this, arguments));
  }

  _createClass(ImageModel, [{
    key: 'import',


    /**
     * Converts JSON_API formated Entity into a plain object.
     * @param  {Object} entity JSON_API formated object
     * @return {Object}        Plain object representation of the data.
     */
    value: function _import(entity) {
      var model = this.model;
      // Set the models data property to match the entity's

      model._data = entity;

      var data = {};

      // Set each prop listed in the schema.
      forEach(this.schema, function (value, key) {
        var prop = value.alias ? value.alias : key;

        // Translations is a special property that does not map to a field.
        if (prop !== 'translations') {
          data[prop] = model[prop];
        }
      });

      return data;
    }
  }]);

  return ImageModel;
}(EntityModel);

export default EntityModel;