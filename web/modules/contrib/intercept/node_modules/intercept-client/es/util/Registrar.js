var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Registrar = function () {
  function Registrar(name) {
    _classCallCheck(this, Registrar);

    this.name = name;
    this.manifest = {};
    this.register = this.register.bind(this);
    this.getByResource = this.get.bind(this);
  }

  _createClass(Registrar, [{
    key: "register",
    value: function register(id, instance) {
      this.manifest[id] = instance;
    }
  }, {
    key: "get",
    value: function get(id) {
      return this.manifest[id];
    }
  }]);

  return Registrar;
}();

export default Registrar;