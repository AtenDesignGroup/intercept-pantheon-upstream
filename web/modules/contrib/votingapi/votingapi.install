<?php

/**
 * @file
 * Installation file for VotingAPI module.
 */

use Drupal\Core\Entity\EntityStorageException;

/**
 * Implements hook_update_N().
 */
function votingapi_update_8301(&$sandbox) {
  $existDdata = [];
  $tables = ["votingapi_result"];
  $database = \Drupal::database();
  // Retrieve existing field data in votingapi_result table.
  foreach ($tables as $table) {
    // Retrieve any available data and temporarily store in array $existDdata.
    $existDdata[$table] = $database->select($table)
      ->fields($table)
      ->execute()
      ->fetchAll(PDO::FETCH_ASSOC);
    // Delete any table data.
    $database->truncate($table)->execute();
  }
  try {
    $entityDefUpManager = \Drupal::service('entity.definition_update_manager');
    $entityDefUpManager->applyUpdates();
    \Drupal::logger('votingapi: ')->notice('Successfully applied updates');
  }
  catch (EntityStorageException $e) {
    \Drupal::logger('votingapi: ')->notice($e->getMessage());
  }
  // Restore the data.
  foreach ($tables as $table) {
    if (!empty($table) && !empty($existDdata[$table])) {
      $insert_query = $database
        ->insert($table)
        ->fields(array_keys(end($existDdata[$table])));
      foreach ($existDdata[$table] as $row) {
        $insert_query->values(array_values($row));
      }
      $insert_query->execute();
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * Update the structure of data storage.
 */
function votingapi_update_8302(&$sandbox) {
  $query = \Drupal::database()->select('votingapi_vote', 'v');
  $query->fields('v', ['id', 'vote_source']);
  $results = $query->execute()->fetchAll();
  if (!empty($results)) {
    foreach ($results as $result) {
      if (!empty($result) && !empty($result->vote_source)) {
        $data = hash('sha256', serialize($result->vote_source));
        $query = \Drupal::database()->update('votingapi_vote');
        $query->fields(['vote_source' => $data]);
        $query->condition('id', $result->id);
        $query->execute();
      }
    }
  }
}

/**
 * Alter votingapi_result table manually before definition update.
 */
function votingapi_update_8303(&$sandbox) {
  // First we need to change the column of the table manually, because if there is content already,
  // entity definition update manager will not allow to change the length of function field.
  $field_storage_definitions = \Drupal::service('entity_field.manager')->getFieldStorageDefinitions('vote_result');
  if (!empty($field_storage_definitions['function'])) {
    /** @var \Drupal\Core\Field\BaseFieldDefinition $function_field_definition */
    $function_field_definition = $field_storage_definitions['function'];
    $schema = $function_field_definition->getSchema();
    \Drupal::database()->schema()->changeField('votingapi_result', 'function', 'function', $schema['columns']['value']);
    if (!empty($function_field_definition)) {
      $new_schema = [
        'votingapi_result' => [
          'fields' => [
            'function' => $schema['columns']['value'] + ['not null' => FALSE],
          ],
        ],
      ];
      \Drupal::keyValue('entity.storage_schema.sql')->set('vote_result.field_schema_data.function', $new_schema);
    }
    /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $repo */
    $repo = \Drupal::service('entity.last_installed_schema.repository');
    $repo->setLastInstalledFieldStorageDefinition($function_field_definition);
  }
}

/**
 * Update the definition of 'Function' field Vote Result entity.
 */
function votingapi_update_8304(&$sandbox) {
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  if ($vote_result_fields = \Drupal::service('entity_field.manager')->getFieldStorageDefinitions('vote_result')) {
    /** @var \Drupal\Core\Field\BaseFieldDefinition $function_field_definition */
    $function_field_definition = $vote_result_fields['function'];
    $function_field_definition->getSchema();
    $definition_update_manager->updateFieldStorageDefinition($function_field_definition);
  }
}
