<?php

/**
 * @file
 * Contains votingapi.module.
 *
 * A generalized Voting API for Drupal.
 *
 * Maintains and provides an interface for a shared bin of vote and rating
 * data. Modules can cast votes with arbitrary properties and Voting API will
 * total them automatically. Support for basic anonymous voting by
 * IP address hash, multi-criteria voting, arbitrary aggregation functions, etc.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Hook\Attribute\LegacyHook;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Drupal\votingapi\Hook\VotingApiCronHooks;
use Drupal\votingapi\Hook\VotingApiEntityHooks;
use Drupal\votingapi\Hook\VotingApiHelpHooks;
use Drupal\votingapi\Hook\VotingApiViewsHooks;

/**
 * Implements hook_help().
 */
#[LegacyHook]
function votingapi_help($route_name, RouteMatchInterface $route_match) {
  return \Drupal::service(VotingApiHelpHooks::class)->help($route_name, $route_match);
}

/**
 * Implements hook_entity_delete().
 */
#[LegacyHook]
function votingapi_entity_delete(EntityInterface $entity) {
  \Drupal::service(VotingApiEntityHooks::class)->entityDelete($entity);
}

/**
 * Implements hook_cron().
 *
 * Recalculates results for any entities that have gotten votes since the last
 * run.
 */
#[LegacyHook]
function votingapi_cron() {
  \Drupal::service(VotingApiCronHooks::class)->cron();
}

/**
 * Implements hook_views_query_alter().
 */
#[LegacyHook]
function votingapi_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  \Drupal::service(VotingApiViewsHooks::class)->viewsQueryAlter($view, $query);
}
