<?php

/**
 * @file
 * Provides a 'Card' container element for clientside multistep form pagination.
 */

use Drupal\Core\Hook\Attribute\LegacyHook;
use Drupal\webform_cards\Hook\WebformCardsHooks;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\EventSubscriber\MainContentViewSubscriber;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Render\Element\RenderElementBase;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\webform\Element\WebformMessage;
use Drupal\webform\Utility\WebformDialogHelper;
use Drupal\webform\Utility\WebformElementHelper;
use Drupal\webform\WebformInterface;
use Drupal\webform\WebformSubmissionInterface;

/**
 * Implements hook_entity_base_field_info().
 */
#[LegacyHook]
function webform_cards_entity_base_field_info(EntityTypeInterface $entity_type) {
  return \Drupal::service(WebformCardsHooks::class)->entityBaseFieldInfo($entity_type);
}

/* ************************************************************************** */
// Menu hook.
/* ************************************************************************** */

/**
 * Implements hook_menu_local_actions_alter().
 */
#[LegacyHook]
function webform_cards_menu_local_actions_alter(&$local_actions) {
  \Drupal::service(WebformCardsHooks::class)->menuLocalActionsAlter($local_actions);
}

/**
 * Implements hook_preprocess_menu_local_action().
 *
 * @see webform_ui_preprocess_menu_local_action()
 */
function webform_cards_preprocess_menu_local_action(&$variables) {
  if (\Drupal::routeMatch()->getRouteName() !== 'entity.webform.edit_form') {
    return;
  }

  if ($variables['link']['#url']->getRouteName() === 'entity.webform_ui.element.add_card') {
    $variables['link']['#options']['attributes']['class'][] = 'button--secondary';
  }
}

/* ************************************************************************** */
// Entity hook.
/* ************************************************************************** */

/**
 * Implements hook_ENTITY_TYPE_presave() for webform_submission entities.
 */
function webform_cards_webform_submission_presave(WebformSubmissionInterface $webform_submission) {
  if (!$webform_submission->isDraft()) {
    $webform_submission->set('current_card', NULL);
  }
}

/* ************************************************************************** */
// Form alter hooks.
/* ************************************************************************** */

/**
 * Implements hook_webform_submission_form_alter().
 */
#[LegacyHook]
function webform_cards_webform_submission_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  return \Drupal::service(WebformCardsHooks::class)->webformSubmissionFormAlter($form, $form_state, $form_id);
}

/**
 * Entity form builder to set the current card for a webform submission.
 */
function webform_cards_webform_submission_builder($entity_type, WebformSubmissionInterface $entity, &$form, FormStateInterface $form_state) {
  $entity->set('current_card', $form_state->getValue('current_card'));
}

/**
 * Implements hook_form_FORM_ID_alter() for webform UI and source edit form.
 *
 * @see \Drupal\webform_ui\WebformUiEntityElementsForm
 */
function webform_cards_form_webform_edit_form_alter(array &$form, FormStateInterface $form_state) {
  if (!isset($form['webform_ui_elements'])) {
    return;
  }

  /** @var \Drupal\webform_ui\WebformUiEntityElementsForm $form_object */
  $form_object = $form_state->getFormObject();

  /** @var \Drupal\webform\WebformInterface $webform */
  $webform = $form_object->getEntity();
  $wrapper_format = \Drupal::request()->get(MainContentViewSubscriber::WRAPPER_FORMAT);
  $is_ajax_request = ($wrapper_format === 'drupal_ajax');
  if ($webform->hasWizardPages() && !$is_ajax_request) {
    $form['webform_cards_convert'] = [
      '#type' => 'webform_message',
      '#message_message' => [
        'message' => ['#markup' => t("Do you want to convert this webform's wizard pages to cards?")],
        'link' => [
          '#type' => 'link',
          '#title' => t('Convert'),
          '#url' => Url::fromRoute('entity.webform.cards_convert_form', ['webform' => $webform->id()]),
          '#attributes' => WebformDialogHelper::getModalDialogAttributes(WebformDialogHelper::DIALOG_NARROW, ['button', 'button--small']),
          '#prefix' => ' ',
        ],
      ],
      '#message_type' => 'info',
      '#message_close' => TRUE,
      '#message_storage' => WebformMessage::STORAGE_SESSION,
      '#message_id' => 'webform_card_convert_' . $webform->id(),
      '#weight' => -100,
    ];
  }

  $form['#attached']['library'][] = 'webform_cards/webform_cards.admin';
}

/**
 * Implements hook_form_FORM_ID_alter() for webform configuration:forms.
 *
 * @see \Drupal\webform\Form\AdminConfig\WebformAdminConfigFormsForm
 * @see /admin/structure/webform/config
 */
function webform_cards_form_webform_admin_config_forms_form_alter(array &$form, FormStateInterface $form_state) {
  _webform_cards_form_alter_elements($form, [
    'wizard_settings' => [
      '#title' => t('Form wizard/cards settings'),
      'default_wizard_prev_button_label' => [
        '#title' => t('Default wizard/cards previous page button label'),
      ],
      'default_wizard_next_button_label' => [
        '#title' => t('Default wizard/cards next page button label'),
      ],
      'default_wizard_start_label' => [
        '#title' => t('Default wizard/cards start label'),
      ],
      'default_wizard_confirmation_label' => [
        '#title' => t('Default wizard/cards end label'),
      ],
      'default_wizard_toggle_show_label' => [
        '#title' => t('Default wizard/cards show all elements label'),
      ],
      'default_wizard_toggle_hide_label' => [
        '#title' => t('Default wizard/cards hide all elements label'),
      ],
    ],
  ]);
}

/**
 * Implements hook_form_FORM_ID_alter() for webform configuration:elements.
 *
 * @see \Drupal\webform\Form\AdminConfig\WebformAdminConfigElementsForm
 * @see /admin/structure/webform/config/elements
 */
function webform_cards_form_webform_admin_config_elements_form_alter(array &$form, FormStateInterface $form_state) {
  _webform_cards_form_alter_elements($form, [
    'element' => [
      'default_section_title_tag' => [
        '#title' => t('Default section/card title tag'),
      ],
    ],
  ]);
}

/**
 * Implements hook_form_FORM_ID_alter() for webform settings:form.
 *
 * @see \Drupal\webform\EntitySettings\WebformEntitySettingsFormForm
 * @see /admin/structure/webform/manage/{webform}/settings
 */
function webform_cards_form_webform_settings_form_alter(array &$form, FormStateInterface $form_state) {
  $has_cards = _webform_cards_form_state_has_cards($form_state);
  if (!$has_cards) {
    return;
  }

  // Move hide/show from container to jus the progress type.
  $form['ajax_settings']['ajax_container']['ajax_progress_type']['#states'] = $form['ajax_settings']['ajax_container']['#states'];
  $form['ajax_settings']['ajax_container']['#states'] = NULL;

  // Display info message.
  $form['ajax_settings']['ajax_container']['ajax_progress_type']['#weight'] = -10;
  $form['ajax_settings']['ajax_container']['ajax_cards_message'] = [
    '#type' => 'webform_message',
    '#message_type' => 'info',
    '#message_close' => TRUE,
    '#message_storage' => WebformMessage::STORAGE_SESSION,
    '#message_message' => t('The below Ajax scroll, effect, and speed settings will also be applied to cards.'),
    '#weight' => -9,
  ];
}

/**
 * Implements hook_form_FORM_ID_alter() for webform settings form.
 *
 * @see \Drupal\webform\EntitySettings\WebformEntitySettingsGeneralForm
 * @see /admin/structure/webform/manage/{webform}/settings/form
 */
function webform_cards_form_webform_settings_form_form_alter(array &$form, FormStateInterface $form_state) {
  $has_cards = _webform_cards_form_state_has_cards($form_state);
  if ($has_cards) {
    unset($form['wizard_settings']['#states']);
  }

  _webform_cards_form_alter_elements($form, [
    'wizard_settings' => [
      '#title' => t('Form wizard/cards settings'),
      // Progress.
      'wizard_progress_bar' => [
        '#title' => t('Show wizard/cards progress bar'),
      ],
      'wizard_progress_link' => [
        '#title' => t('Link to previous pages/cards in progress bar'),
        '#description' => t('If checked, previous pages/cards will be link in the progress bar.'),
      ],
      'wizard_progress_pages' => [
        '#title' => t('Show wizard/cards progress pages'),
      ],
      'wizard_progress_percentage' => [
        '#title' => t('Show wizard/cards progress percentage'),
      ],
      'wizard_preview_link' => [
        '#title' => t('Link to previous pages/cards in preview'),
        '#description' => t("If checked, the preview page/card will include 'Edit' buttons for each previous page/card.") . '<br/><br/>' .
        '<em>' . t("This setting is only available when 'Enable preview page/card' is enabled.") . '</em>',
      ],
      'wizard_progress_states' => [
        '#title' => t("Update wizard/cards progress bar's pages based on conditions"),
        '#description' => t("If checked, the wizard/cards progress bar's pages will be hidden or shown based on each pages conditional logic."),
      ],
      // Navigation.
      'wizard_navigation_title' => [
        '#access' => TRUE,
      ],
      'wizard_auto_forward' => [
        '#access' => TRUE,
      ],
      'wizard_auto_forward_hide_next_button' => [
        '#access' => TRUE,
      ],
      'wizard_keyboard' => [
        '#access' => TRUE,
      ],
      // Pages.
      'wizard_pages_title' => [
        '#states' => [],
      ],
      'wizard_confirmation' => [
        '#title' => t('Include confirmation page/card in progress'),
        '#description' => t("If checked, the confirmation page/card will be included in the progress bar."),
      ],
      'wizard_toggle' => [
        '#title' => t('Display show/hide all wizard/cards pages link'),
        '#description' => t('If checked, a hide/show all elements link will be added to this webform when there are wizard/cards pages.'),
        '#access' => TRUE,
      ],
      // Labels.
      'wizard_toggle_show_label' => [
        '#title' => t('Wizard/cards show all elements label'),
        '#access' => TRUE,
      ],
      'wizard_toggle_hide_label' => [
        '#title' => t('Wizard/card hide all elements label'),
        '#access' => TRUE,
      ],
      'wizard_start_label' => [
        '#title' => t('Wizard/cards start label'),
        '#description' => t('The first page label in the progress bar. Subsequent pages are titled by their wizard/card page title.'),
      ],
      'wizard_confirmation_label' => [
        '#title' => t('Wizard/cards end label'),
      ],
      'wizard_prev_button_label' => [
        '#title' => t('Wizard/cards previous page button label'),
        '#description' => t('This is used for the previous page button within a wizard/cards.'),
      ],
      'wizard_next_button_label' => [
        '#title' => t('Wizard/cards next page button label'),
        '#description' => t('This is used for the next page button within a wizard/cards.'),
      ],
      // Tracking.
      'wizard_track' => [
        '#title' => t('Track wizard/cards progress in the URL by'),
        '#options' => [
          'name' => t("Page/card name (?page=contact)"),
          'index' => t("Page/card index (?page=2)"),
        ],
      ],
    ],
  ]);
}

/**
 * Implements hook_form_FORM_ID_alter() for webform settings submissions.
 *
 * @see \Drupal\webform\EntitySettings\WebformEntitySettingsSubmissionsForm
 * @see /admin/structure/webform/manage/{webform}/settings/form
 */
function webform_cards_form_webform_settings_submissions_form_alter(array &$form, FormStateInterface $form_state) {
  $has_cards = _webform_cards_form_state_has_cards($form_state);
  if ($has_cards) {
    $form['draft_settings']['draft_container']['draft_multiple']['#weight'] = -1;
    $form['draft_settings']['draft_container']['draft_auto_save_message'] = [
      '#type' => 'webform_message',
      '#message_message' => t('The automatic saving of drafts only applies to previewing when using cards. Please try using the <a href=":href">Webform autosave module</a>.', [':href' => 'https://www.drupal.org/project/webformautosave']),
      '#message_type' => 'info',
      '#message_close' => TRUE,
      '#message_storage' => WebformMessage::STORAGE_SESSION,
      '#message_id' => 'webform_card_draft_auto_save',
      '#weight' => 0,
    ];
  }
}

/**
 * Determine if the form state's related webform has cards.
 *
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 *
 * @return bool
 *   TRUE if the form states entity webform has cards.
 */
function _webform_cards_form_state_has_cards(FormStateInterface $form_state) {
  /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
  $form_object = $form_state->getFormObject();

  /** @var \Drupal\webform\WebformInterface $entity */
  $webform = $form_object->getEntity();

  /** @var \Drupal\webform_cards\WebformCardsManagerInterface $webform_cards_manager */
  $webform_cards_manager = \Drupal::service('webform_cards.manager');

  // Check if the webform has cards.
  return $webform_cards_manager->hasCards($webform);
}

/**
 * Alter webform wizard configuration and settings form elements.
 *
 * @param array &$form
 *   The form to be altered.
 * @param array $elements
 *   The elements to be altered.
 */
function _webform_cards_form_alter_elements(array &$form, array $elements) {
  foreach ($elements as $container_key => $container) {
    foreach ($container as $key => $element) {
      if (!isset($form[$container_key][$key])) {
        continue;
      }

      if (WebformElementHelper::property($key)) {
        $form[$container_key][$key] = $element;
      }
      elseif (is_array($container)) {
        $form[$container_key][$key] = $element + $form[$container_key][$key];
      }
    }
  }
}

/* ************************************************************************** */
// Theming.
/* ************************************************************************** */

/**
 * Implements hook_theme().
 */
#[LegacyHook]
function webform_cards_theme() {
  return \Drupal::service(WebformCardsHooks::class)->theme();
}

/**
 * Prepares variables for webform section element templates.
 *
 * Default template: webform-section.html.twig.
 *
 * Copied from: template_preprocess_fieldset()
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #attributes, #children, #description, #id, #title,
 *     #value.
 */
function template_preprocess_webform_card(array &$variables) {
  $element = $variables['element'];
  Element::setAttributes($element, ['id']);
  RenderElementBase::setAttributes($element);
  $variables['attributes'] = $element['#attributes'] ?? [];
  $variables['prefix'] = $element['#field_prefix'] ?? NULL;
  $variables['suffix'] = $element['#field_suffix'] ?? NULL;
  $variables['title_display'] = $element['#title_display'] ?? NULL;
  $variables['title_tag'] = $element['#title_tag'] ?? 'h2';
  $variables['title_attributes'] = $element['#title_attributes'] ?? [];
  $variables['children'] = $element['#children'];

  // Allow markup in title.
  if (isset($element['#title']) && $element['#title'] !== '') {
    $variables['title'] = ['#markup' => $element['#title']];
  }

  // Add 'visually-hidden' class to title attributes.
  if ($variables['title_display'] === 'invisible') {
    $variables['title_attributes']['class'][] = 'visually-hidden';
  }
  $variables['title_attributes'] = new Attribute($variables['title_attributes']);

  if (!empty($element['#description'])) {
    $description_id = $element['#attributes']['id'] . '--description';
    $description_attributes['id'] = $description_id;
    $variables['description']['attributes'] = new Attribute($description_attributes);
    $variables['description']['content'] = $element['#description'];

    // Add the description's id to the fieldset aria attributes.
    $variables['attributes']['aria-describedby'] = $description_id;
  }

  // Setup description, help, and more.
  _webform_preprocess_element($variables);
}

/**
 * Implements hook_preprocess_webform_confirmation() for webform cards.
 */
function webform_cards_preprocess_webform_confirmation(array &$variables) {
  /** @var \Drupal\webform\WebformInterface $webform */
  $webform = $variables['webform'];
  /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
  $webform_submission = $variables['webform_submission'];

  /** @var \Drupal\webform_cards\WebformCardsManagerInterface $webform_cards_manager */
  $webform_cards_manager = \Drupal::service('webform_cards.manager');

  // Check if the webform has cards.
  $has_cards = $webform_cards_manager->hasCards($webform);
  if (!$has_cards) {
    return;
  }

  // Set progress.
  $pages = $webform_cards_manager->buildPages($webform);
  $settings = $webform->getSettings();
  if ($pages && $settings['wizard_confirmation'] && ($settings['wizard_progress_bar'] || $settings['wizard_progress_pages'] || $settings['wizard_progress_percentage'])) {
    $variables['progress'] = [
      '#theme' => 'webform_progress',
      '#webform' => $webform,
      '#webform_submission' => $webform_submission,
      '#current_page' => WebformInterface::PAGE_CONFIRMATION,
      '#pages' => $webform_cards_manager->applyConditions($pages, $webform_submission),
    ];
  }
}
