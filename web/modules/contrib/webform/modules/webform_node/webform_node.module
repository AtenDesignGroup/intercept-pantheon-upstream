<?php

/**
 * @file
 * Provides a webform content type which allows webforms to be integrated into a website as nodes.
 */

use Drupal\Core\Hook\Attribute\LegacyHook;
use Drupal\webform_node\Hook\WebformNodeHooks;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\webform\Element\WebformMessage;

/**
 * Implements hook_entity_type_alter().
 */
#[LegacyHook]
function webform_node_entity_type_alter(array &$entity_types) {
  \Drupal::service(WebformNodeHooks::class)->entityTypeAlter($entity_types);
}

/**
 * Implements hook_entity_operation().
 */
#[LegacyHook]
function webform_node_entity_operation(EntityInterface $entity) {
  return \Drupal::service(WebformNodeHooks::class)->entityOperation($entity);
}

/**
 * Implements hook_node_access().
 */
#[LegacyHook]
function webform_node_node_access(NodeInterface $node, $operation, AccountInterface $account) {
  return \Drupal::service(WebformNodeHooks::class)->nodeAccess($node, $operation, $account);
}

/**
 * Implements hook_webform_submission_query_access_alter().
 */
#[LegacyHook]
function webform_node_webform_submission_query_access_alter(AlterableInterface $query, array $webform_submission_tables) {
  return \Drupal::service(WebformNodeHooks::class)->webformSubmissionQueryAccessAlter($query, $webform_submission_tables);
}

/**
 * Implements hook_node_prepare_form().
 *
 * Prepopulate a node's webform field target id.
 *
 * @see \Drupal\webform_node\Controller\WebformNodeReferencesListController::render
 */
#[LegacyHook]
function webform_node_node_prepare_form(NodeInterface $node, $operation, FormStateInterface $form_state) {
  return \Drupal::service(WebformNodeHooks::class)->nodePrepareForm($node, $operation, $form_state);
}

/**
 * Implements hook_node_delete().
 *
 * Remove user specified entity references.
 */
#[LegacyHook]
function webform_node_node_delete(NodeInterface $node) {
  \Drupal::service(WebformNodeHooks::class)->nodeDelete($node);
}

/**
 * Implements hook_field_widget_single_element_WIDGET_TYPE_form_alter().
 */
function webform_node_field_widget_single_element_webform_entity_reference_autocomplete_form_alter(&$element, FormStateInterface $form_state, $context) {
  static $once;
  if (!empty($once)) {
    return;
  }
  $once = TRUE;

  // Make sure the 'target_id' is included.
  if (!isset($element['target_id'])) {
    return;
  }

  // Display a warning message if webform query string parameter is missing.
  if (empty($element['target_id']['#default_value'])) {
    $element['target_id']['#attributes']['class'][] = 'js-target-id-webform-node-references';
    $element['webform_node_references'] = [
      '#type' => 'webform_message',
      '#message_type' => 'info',
      '#message_close' => TRUE,
      '#message_id' => 'webform_node.references',
      '#message_storage' => WebformMessage::STORAGE_USER,
      '#message_message' => t('Webforms must first be <a href=":href">created</a> before referencing them.', [':href' => Url::fromRoute('entity.webform.collection')->toString()]),
      '#cache' => ['max-age' => 0],
      '#weight' => -10,
      '#states' => [
        'visible' => [
          '.js-target-id-webform-node-references' => ['value' => ''],
        ],
      ],
    ];
  }
}

/**
 * Implements hook_field_widget_single_element_WIDGET_TYPE_form_alter().
 */
function webform_node_field_widget_single_element_webform_entity_reference_select_form_alter(&$element, FormStateInterface $form_state, $context) {
  webform_node_field_widget_single_element_webform_entity_reference_autocomplete_form_alter($element, $form_state, $context);
}

/**
 * Implements hook_preprocess_HOOK() for page title templates.
 */
function webform_node_preprocess_page_title(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node && is_string($node)) {
    $node = Node::load($node);
  }

  if (!$node) {
    return;
  }

  /** @var \Drupal\webform\WebformEntityReferenceManagerInterface $entity_reference_manager */
  $entity_reference_manager = \Drupal::service('webform.entity_reference_manager');

  // Only allow user to change webform for specific routes.
  if (!$entity_reference_manager->isUserWebformRoute($node)) {
    return;
  }

  $webforms = $entity_reference_manager->getWebforms($node);
  if (count($webforms) > 1) {
    $route_options = ['query' => \Drupal::destination()->getAsArray()];

    $operations = [];

    // Add current webform first.
    $current_webform = $entity_reference_manager->getWebform($node);
    $operations[$current_webform->id()] = [
      'title' => $current_webform->label(),
      'url' => Url::fromRoute('entity.node.webform.entity_reference.set', ['node' => $node->id(), 'webform' => $current_webform->id()], $route_options),
    ];

    // Add remaining webforms.
    foreach ($webforms as $webform) {
      $operations[$webform->id()] = [
        'title' => $webform->label(),
        'url' => Url::fromRoute('entity.node.webform.entity_reference.set', ['node' => $node->id(), 'webform' => $webform->id()], $route_options),
      ];
    }

    $variables['title_prefix']['webform_node'] = [
      '#type' => 'operations',
      '#links' => $operations,
      '#prefix' => '<div class="webform-dropbutton webform-node-entity-references">',
      '#suffix' => '</div>',
      '#attached' => [
        'library' => [
          'webform_node/webform_node.entity_references',
        ],
      ],
    ];
  }
}
