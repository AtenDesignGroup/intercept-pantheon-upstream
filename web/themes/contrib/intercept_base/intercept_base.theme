<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\Component\Utility\Tags;
use Drupal\Core\Form\FormStateInterface;
use Drupal\user\Entity\User;

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function intercept_base_preprocess_page(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($route_name == 'intercept_core.management.default') {
    $variables['#attached']['library'][] = 'intercept_base/more-link';
  }

  _intercept_base_add_logo($variables);

  // Establish whether the current user has a staff role (for use in header.twig).
  if ($variables['logged_in']) {
    $roles = \Drupal::currentUser()->getRoles();
    if (!in_array('intercept_registered_customer', $roles)) {
      $variables['is_staff'] = TRUE;
    }
    else {
      $variables['is_staff'] = FALSE;
    }
  }
}

/**
 * Implements hook_preprocess_maintenance_page() for maintenance page templates.
 */
function intercept_base_preprocess_maintenance_page(&$variables) {
  _intercept_base_add_logo($variables);
}

/**
 * Adds the paths to the svg and png versions of the logo(s).
 *
 * @param array $variables
 *   Preprocess variables to attach logo data to.
 */
function _intercept_base_add_logo(array &$variables) {
  // Get the svg + png logo paths.
  $theme_path = \Drupal::service('theme.manager')->getActiveTheme()->getPath();
  if (theme_get_setting('logo.use_default')) {
    $variables['logo_path'] = '/' . $theme_path . '/logo.svg';
  }
  else {
    $variables['logo_path'] = theme_get_setting('logo.path') ? file_create_url(theme_get_setting('logo.path')) : '';
  }
}

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function intercept_base_form_system_theme_settings_alter(&$form, FormStateInterface &$form_state, $form_id = NULL) {
  if (isset($form_id)) {
    return;
  }

  $form['logo']['settings']['logo_upload']['#upload_validators'] = [
    'file_validate_extensions' => [
      'png jpeg jpg jpe gif svg',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK() for event_eval_feedback templates.
 */
function intercept_base_preprocess_event_eval_feedback(&$variables) {
  $variables['#attached']['library'][] = 'intercept_base/event-eval-feedback';
}

/**
 * Implements hook_preprocess_form() for blocks.
 */
function intercept_base_preprocess_form(&$variables) {
  $form_id = $variables['element']['#id'];

  switch ($form_id) {
    case 'room-reservation-settings':
    case 'node-event-attendance-form':
      $variables['#attached']['library'][] = 'intercept_base/filters';
      break;

    case 'views-exposed-form-intercept-user-events-embed':
    case 'views-exposed-form-intercept-room-reservations-embed':
    case 'views-exposed-form-intercept-equipment-reservations-embed':
    case 'views-exposed-form-intercept-events-embed':
    case 'views-exposed-form-intercept-equipment-page':
    case 'views-exposed-form-intercept-event-attendance-by-age-group-page':
    case 'views-exposed-form-intercept-event-attendance-embed':
    case 'views-exposed-form-intercept-meetings-page':
      $variables['attributes']['class'][] = 'filters__inputs';
      $variables['attributes']['class'][] = 'filters__inputs--uniform-padding';
      $variables['attributes']['class'][] = 'form-wrapper';
      $variables['#attached']['library'][] = 'intercept_base/filters';
      break;
  }
}

/**
 * Implements hook_preprocess_form_element().
 */
function intercept_base_preprocess_form_element(&$variables) {
  $form_id = $variables['element']['#form_id'] ?? NULL;

  switch ($form_id) {
    case 'views_exposed_form':
      switch ($variables['element']['#type']) {
        case 'select':
          $variables['attributes']['class'][] = 'select-filter';
          break;

        case 'textfield':
          $variables['attributes']['class'][] = 'keyword-filter';
          break;
      }
      break;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for fields.
 */
function intercept_base_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $name = $variables['element']['#field_name'];
  $mode = $variables['element']['#view_mode'];
  $bundle = $variables['element']['#bundle'];
  $suggestions[] = implode('__', ['field', $name, $mode]);
  $suggestions[] = implode('__', ['field', $name, $bundle, $mode]);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for views.
 */
function intercept_base_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  // Add theme suggestions for each single tag.
  foreach (Tags::explode($variables['view']->storage->get('tag')) as $tag) {
    $suggestions[] = 'views_view__tag_' . preg_replace('/[^a-z0-9]/', '_', strtolower($tag));
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function intercept_base_preprocess_node_event_recurrences(&$variables) {
  $variables['content_attributes']['class'][] = 'l--offset';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function intercept_base_preprocess_event_registration_event_form(&$variables) {
  $variables['content_attributes']['class'][] = 'l--offset';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function intercept_base_preprocess_event_recurrence_event_form(&$variables) {
  $variables['content_attributes']['class'][] = 'l--offset';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function intercept_base_preprocess_node_event_registrations(&$variables) {
  $variables['content_attributes']['class'][] = 'l--offset';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function intercept_base_preprocess_node_event_analysis(&$variables) {
  $variables['content_attributes']['class'][] = 'l--offset';
}

/**
 * Add a prefix to a path for use with array_walk()
 */
function _intercept_base_get_absolute_path(&$value, $key, $prefix) {
  $value = $prefix . $value;
}

/**
 * Add Grunticon stylesheet loader.
 */
function _intercept_base_add_grunticon_support(&$variables) {
  /*
   * Array of stylesheets.
   *  This is the default, if you set custom stylesheet names in
   *  Gruntfile.js, update these to reflect those changes.
   */
  $grunticon_stylesheets = [
    'svg' => 'icons.data.svg.css',
    'png' => 'icons.data.png.css',
    'fallback' => 'icons.fallback.css',
  ];

  /*
   * Add the absolute path to your stylesheets.
   *  This will depend on your Grunticon task's 'dest' option.
   *  Update this path accordingly.
   */
  $path_to_theme = \Drupal::service('theme.manager')->getActiveTheme()->getPath();
  $path_prefix = $GLOBALS['base_url'] . '/' . $path_to_theme . '/images/icons/svg/';

  array_walk($grunticon_stylesheets, '_intercept_base_get_absolute_path',
    $path_prefix
  );

  $variables['grunticon'] = $grunticon_stylesheets;
}

/**
 * Implements hook_preprocess_user().
 */
function intercept_base_preprocess_user(array &$variables) {
  $block_manager = \Drupal::service('plugin.manager.block');
  $blocks = [
    'suggested_events' => [
      'id' => 'user_suggested_events',
      'params' => ['results' => 3],
    ],
  ];

  foreach ($blocks as $key => $config) {
    $params = isset($config['params']) ? $config['params'] : [];
    $block = $block_manager->createInstance($config['id'], $params);
    $variables['content'][$key] = $block->build();
  }

  $variables['content']['recent_events'] = [
    '#type' => 'view',
    '#name' => 'intercept_user_events',
    '#display_id' => 'embed_recent_events',
  ];

  $variables['content']['room_reservation'] = [
    '#type' => 'view',
    '#name' => 'intercept_room_reservations',
    '#display_id' => 'upcoming',
  ];
}

/**
 * Implements hook_preprocess_views_view_field().
 */
function intercept_base_preprocess_views_view_field(&$variables) {
  $view = $variables['view'];
  $row = $variables['row'];
  if ($variables['field']->field == 'field_user') {
    if ($view->id() == 'intercept_room_reservations' && $view->current_display == 'embed') {
      $uid = $variables['field']->getValue($row);
      if ($uid) {
        $username = $variables['field']->advancedRender($row);
        if ($username) {
          $username = $username->__toString();
        }

        // Got the username & uid. Now, find the authdata.
        $authdata = intercept_base_get_authdata($uid);
        if ($authdata) {
          // Append the name and email address.
          $variables['output'] = $authdata->NameFirst . ' ' . $authdata->NameLast . "\n" . $authdata->EmailAddress . "\n" . $authdata->PhoneNumber . "\n" . $authdata->Barcode;
        }
        else {
          // It should be a staff member.
          // Just show that user's email and name from Drupal.
          $user = User::load($uid);
          if ($user) {
            $email = $user->getEmail();
            $name = $user->getDisplayName();
            // Append the name and email address.
            $variables['output'] = $name . "\n" . $email;
          }
        }
      }
    }
  }
}

/**
 * Implements template_preprocess_views_view_row_rss().
 */
function intercept_base_preprocess_views_view_row_rss(&$variables) {
  $view = $variables['view'];
  $item = $variables['row'];

  // Description tweaks to add <enclosure> tag for RSS feeds & digital signage.
  if ($view->id() == 'intercept_rss_events' && $view->current_display == 'feed_1') {
    if (isset($item->description) && is_array($item->description)) {
      $explosion = explode('|', $variables['description']);
      $variables['description'] = ['#markup' => trim($explosion[0])];

      // Build enclosure.
      if ($explosion[1]) {
        $host = \Drupal::request()->getSchemeAndHttpHost();
        $variables['enclosure'] = ['#markup' => $host . $explosion[1]];

        $file = file_load($explosion[2]);
        // $uri = $file->getFileUri();
        //$image = \Drupal::service('image.factory')->get($uri);
        $variables['enclosure_size'] = ['#markup' => $file->filesize->value];
        $variables['enclosure_mime'] = ['#markup' => $file->filemime->value];
      }
    }
  }
}

/**
 * Get authdata for user in the row in order to display customer info.
 */
function intercept_base_get_authdata($uid) {
  $ils_settings = \Drupal::service('config.factory')->get('intercept_ils.settings');
  $intercept_ils_plugin = $ils_settings->get('intercept_ils_plugin', '');
  if ($intercept_ils_plugin) {
    $authmap = \Drupal::service('externalauth.authmap');
    $authdata = $authmap->getAuthdata($uid, $intercept_ils_plugin);
    return unserialize($authdata['data']);
  }
  return FALSE;
}

/**
 * Implements hook_preprocess_menu().
 */
function intercept_base_preprocess_menu__account(&$variables) {
  // Remove the Account Summary menu item if the user isn't a customer.
  $roles = \Drupal::currentUser()->getRoles();
  if (!in_array('intercept_registered_customer', $roles)) {
    unset($variables['items']['user.page']);
  }
}
