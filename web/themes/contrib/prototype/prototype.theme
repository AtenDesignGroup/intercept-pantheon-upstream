<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function prototype_form_search_block_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Attach search_form library.
  $form['#attached']['library'][] = 'prototype/search_form';

  // Add search-form component classes.
  $form['#attributes']['class'] = ['search-form'];
  $form['keys']['#attributes']['class'][] = 'search-form__input';
  $form['actions']['#attributes']['class'][] = 'search-form__actions';
  $form['actions']['submit']['#attributes']['class'][] = 'search-form__button';
  $form['#theme_wrappers']['form'] = [
    '#attributes' => [
      'class' => ['search-form'],
    ],
  ];
}

/**
 * Add a prefix to a path for use with array_walk().
 */
function _prototype_get_absolute_path(&$value, $key, $prefix) {
  $value = $prefix . $value;
}

/**
 * Implements hook_preprocess_page() for PAGE document templates.
 */
function prototype_preprocess_page(&$variables) {
  // Get the svg + png logo paths.
  $logos = [
    'logo_svg' => 'logo.svg',
    'logo_png' => 'logo.png',
  ];
  _prototype_add_logo($logos, $variables);
  // Get site name and slogan.
  _prototype_add_site_info($variables);
}

/**
 * Adds the paths to the svg and png versions of the logo(s).
 *
 * @param array $logos
 *   Array of logo files to be added into our theme templates. Array key will
 *   be used as the template variable. Array value is the path to the logo file
 *   relative to the theme.
 * @param array $variables
 *   Preprocess variables to attach logo data to.
 */
function _prototype_add_logo(array $logos, array &$variables) {
  $path_to_theme = \Drupal::service('theme.manager')->getActiveTheme()->getPath();

  foreach ($logos as $name => $file) {
    if (file_exists($path_to_theme . "/" . $file)) {
      $variables[$name] = '/' . $path_to_theme . '/' . $file;
    }
  }
}

/**
 * Adds site information from config.
 */
function _prototype_add_site_info(&$variables) {
  $config = \Drupal::config('system.site');
  $variables['site_name'] = $config->get('name');
  $variables['site_slogan'] = $config->get('slogan');
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function prototype_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  $content = $variables['elements']['content'];

  if (isset($content['#block_content']) && $content['#block_content'] instanceof BlockContentInterface) {
    $suggestions[] = 'block__block_content__' . $content['#block_content']->bundle();
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function prototype_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $request = \Drupal::request();
  $request_attributes = $request->attributes;

  if ($request_attributes->has('node')
    && $request_attributes->get('_route') === 'entity.node.canonical') {
    $node = $request_attributes->get('node');
    $content_type = $node->bundle();

    $suggestions[] = 'page__' . $content_type;
  }
}

/**
 * Implements theme_theme_suggestions_input_alter().
 */
function prototype_theme_suggestions_input_alter(&$suggestions, array $variables) {
  $element = $variables['element'];

  // Add Twig template suggestion based on data attributes. To use this, in a
  // `hook_form_alter()` add an element to the `#attributes` array for
  // `data-twit-suggestion`. `button` elements have a template already made.
  if (isset($element['#attributes']['data-twig-suggestion'])) {
    $suggestions[] = "input__{$element['#type']}__{$element['#attributes']['data-twig-suggestion']}";
  }
}

/**
 * Implements hook_preprocess_menu().
 */
function prototype_preprocess_menu(&$variables) {
  $menu_name = $variables['menu_name'];
  $attributes = &$variables['attributes'];

  // Add base classes to our menu.
  $attributes['class'][] = 'menu';
  $attributes['class'][] = "menu--{$menu_name}";

  // Add menu item classes.
  foreach ($variables['items'] as $name => &$item) {
    // Attributes will be an instance of the Attributes object in Drupal.
    $item_classes = ['menu__item'];

    if ($item['is_expanded'] ?? FALSE) {
      $item_classes[] = 'menu__item--expanded';
    }

    if ($item['is_collapsed'] ?? FALSE) {
      $item_classes[] = 'menu__item--collapsed';
    }

    if ($item['is_active_trail'] ?? FALSE) {
      $item_classes[] = 'menu__item--active-trail';
    }

    $item['attributes']->addClass($item_classes);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function prototype_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  $view_mode = $variables['elements']['#view_mode'];
  $suggestions[] = 'taxonomy_term__' . $view_mode;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function prototype_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  $id = $variables['view']->id();
  $display = $variables['view']->current_display;
  $suggestions[] = 'views_view--' . $id;
  $suggestions[] = 'views_view--' . $id . '--' . $display;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function prototype_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables) {
  $id = $variables['view']->id();
  $display = $variables['view']->current_display;
  $suggestions[] = 'views_view_unformatted--' . $id;
  $suggestions[] = 'views_view_unformatted--' . $id . '--' . $display;
}

/**
 * Builds the render array for the provided block.
 *
 * @param string $id
 *   The ID of the block to render.
 *
 * @return null|array
 *   A render array for the block or NULL if the block does not exist.
 */
function prototype_view_block($id) {
  if ($block = Block::load($id)) {
    return \Drupal::entityTypeManager()
      ->getViewBuilder('block')
      ->view($block);
  }
  return NULL;
}
